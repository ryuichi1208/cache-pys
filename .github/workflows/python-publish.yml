name: Upload Python Package

on:
  release:
    types: [created]
  push:
    branches:
      - master
      - develop/*
  pull_request:
    branches:
      - master

env:
  app-name: cache-pys
  cache-version: v1.0.0
  PYTHONUNBUFFERED: 0
  DOCKER_BUILDKIT: 1

jobs:
  ci:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'

    - name: Cache related processing
      uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: ${{ env.cache-version }}-${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ env.cache-version }}-${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          ${{ env.cache-version }}-${{ runner.os }}-pip-
          ${{ env.cache-version }}-

    - name: Install dependencies
      shell: bash
      run: |
        python -m pip install --upgrade pip
        python -V && pip -V
        pip install -r requirements.txt
        
    - name: Install CI tools
      shell: bash
      run: |
        pip install -U --verbose --timeout 60\
          flake8==3.7.9 \
          mypy==0.781 \
          black==19.10b0 \
          pytest==4.6.11 \
          pytest-cov==2.10.0 \
          pytest-html==2.1.1 \
          pytest-timeout==1.4.1
          
    - name: Run Static analysis
      shell: bash
      run: |
        flake8 --count --benchmark .

    - name: Run Formatter
      shell: bash
      run: |
        black --check --verbose --diff .
        
    - name: Run Type check
      shell: bash
      run: |
        mypy .
        
    - name: Run Test
      shell: bash
      run: |
        pytest --collect-only
        pytest --verbose --timeout=60 --durations=0 --showlocals --maxfail=2

    - name: Run Dockerfile Lint
      shell: bash
      run: |
        docker container run --rm -i hadolint/hadolint:v1.18.0-2-g99ff4a4-alpine < Dockerfile || echo $$

    - name: Run Build
      shell: bash
      run: |
        docker image build -t ryuichi1208/${{ env.app-name }} .
        docker image ls --no-trunc
        mkdir -p ./images && docker image save ryuichi1208/${{ env.app-name }} -o images/${{ env.app-name }}.tar
        
    - name: Upload Docker Image
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.app-name }}
        path: images/${{ env.app-name }}.tar
