name: Upload Python Package

on:
  release:
    types: [created]
  push:
    branches:
      - master
      - develop/*
  pull_request:
    branches:
      - master

env:
  app-name: cache-pys
  cache-version: v1.1.0
  PYTHONUNBUFFERED: 0
  DOCKER_BUILDKIT: 1
  # Cache configuration for tests
  CACHE_DEFAULT_TTL: 10
  CACHE_CLEANUP_INTERVAL: 5
  CACHE_MAX_SIZE: 50
  CACHE_STRATEGY: hybrid
  CACHE_WEIGHT_RECENCY: 0.6
  CACHE_WEIGHT_FREQUENCY: 0.4

jobs:
  ci:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.8"

      - name: Cache related processing
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ env.cache-version }}-${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ env.cache-version }}-${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
            ${{ env.cache-version }}-${{ runner.os }}-pip-
            ${{ env.cache-version }}-

      - name: Create requirements.txt
        shell: bash
        run: |
          echo "# Cache-PYS requirements" > requirements.txt
          echo "pytest>=6.0.0" >> requirements.txt
          echo "pytest-cov>=2.10.0" >> requirements.txt
          echo "black>=22.3.0" >> requirements.txt
          echo "flake8>=4.0.0" >> requirements.txt
          echo "mypy>=0.900" >> requirements.txt

      - name: Install dependencies
        shell: bash
        run: |
          python -m pip install --upgrade pip
          python -V && pip -V
          pip install -r requirements.txt
          pip install -e .

      - name: Install CI tools
        shell: bash
        run: |
          pip install -U --verbose --timeout 60\
            pytest-html==2.1.1 \
            pytest-timeout==1.4.1

      - name: Run Static analysis
        shell: bash
        run: |
          flake8 --count --benchmark .

      - name: Run Formatter
        shell: bash
        run: |
          black --check --verbose --diff .

      - name: Run Type check
        shell: bash
        run: |
          mypy .

      - name: Run Test with Different Cache Strategies
        shell: bash
        run: |
          # Test with fixed TTL
          export CACHE_STRATEGY=fixed
          export CACHE_DEFAULT_TTL=5
          pytest --verbose --timeout=60 -k "test_fixed_ttl"

          # Test with sliding TTL
          export CACHE_STRATEGY=sliding
          export CACHE_DEFAULT_TTL=5
          pytest --verbose --timeout=60 -k "test_sliding_ttl"

          # Test with LRU
          export CACHE_STRATEGY=lru
          export CACHE_MAX_SIZE=10
          pytest --verbose --timeout=60 -k "test_lru"

          # Test with LFU
          export CACHE_STRATEGY=lfu
          export CACHE_MAX_SIZE=10
          pytest --verbose --timeout=60 -k "test_lfu"

          # Test with hybrid strategy
          export CACHE_STRATEGY=hybrid
          export CACHE_DEFAULT_TTL=5
          export CACHE_MAX_SIZE=10
          export CACHE_WEIGHT_RECENCY=0.6
          export CACHE_WEIGHT_FREQUENCY=0.4
          pytest --verbose --timeout=60 -k "test_hybrid"

          # Run all tests with default settings
          export CACHE_STRATEGY=fixed
          export CACHE_DEFAULT_TTL=10
          pytest --verbose --timeout=60 --durations=0 --showlocals --maxfail=2

      - name: Test Environment Variable Configuration
        shell: bash
        run: |
          # Run sample with various environment configurations
          echo "Testing with default environment..."
          python sample.py

          echo "Testing with custom environment..."
          export CACHE_DEFAULT_TTL=15
          export CACHE_STRATEGY=sliding
          python sample.py

      - name: Run Dockerfile Lint
        shell: bash
        run: |
          # Create a simple Dockerfile if it doesn't exist
          if [ ! -f Dockerfile ]; then
            echo "FROM python:3.8-slim" > Dockerfile
            echo "WORKDIR /app" >> Dockerfile
            echo "COPY . ." >> Dockerfile
            echo "RUN pip install -e ." >> Dockerfile
            echo "ENV CACHE_DEFAULT_TTL=3600" >> Dockerfile
            echo "ENV CACHE_STRATEGY=hybrid" >> Dockerfile
            echo "CMD [\"python\", \"sample.py\"]" >> Dockerfile
          fi
          docker container run --rm -i hadolint/hadolint:v1.18.0-2-g99ff4a4-alpine < Dockerfile || echo $$

      - name: Run Build
        shell: bash
        run: |
          docker image build -t ryuichi1208/${{ env.app-name }} .
          docker image ls --no-trunc
          mkdir -p ./images && docker image save ryuichi1208/${{ env.app-name }} -o images/${{ env.app-name }}.tar

      - name: Upload Docker Image
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.app-name }}
          path: images/${{ env.app-name }}.tar
        if: github.ref == 'refs/heads/master'
